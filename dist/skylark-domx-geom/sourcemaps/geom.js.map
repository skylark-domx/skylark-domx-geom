{"version":3,"sources":["geom.js"],"names":["define","skylark","langx","noder","styler","cachedScrollbarWidth","rootNodeRE","px","toPixel","offsetParent","borderExtents","elm","isWindow","left","top","right","bottom","s","getComputedStyle","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","boundingPosition","coords","undefined","test","nodeName","getBoundingClientRect","parent","parentOffset","mex","marginExtents","pbex","relativePosition","scrollTop","scrollLeft","this","boundingRect","boundingSize","window","document","documentElement","body","innerHeight","innerWidth","height","width","dimension","isDocument","getDocumentSize","offsetWidth","offsetHeight","isBorderBox","css","props","pex","paddingExtents","bex","clientSize","clientWidth","clientHeight","contentHeight","value","contentSize","cs","contentWidth","doc","max","Math","scrollWidth","scrollHeight","marginLeft","marginTop","marginRight","marginBottom","paddingLeft","paddingTop","paddingRight","paddingBottom","pagePosition","obj","w","ownerDocument","defaultView","pageXOffset","pageYOffset","offset","relativeRect","nodeType","scrollingElement","hasScrollLeft","scrollTo","scrollY","hasScrollTop","scrollX","viewportSize","win","geom","mixin","boundingHeight","boundingWidth","contentRect","hasScrollbar","inview","cushion","r","o","calibrate","vsize","marginRect","me","marginSize","pageRect","round","scrollbarWidth","w1","w2","div","createFragment","innerDiv","childNodes","append","remove","scrollIntoView","align","x","y","parentWidth","parentHeight","parentElm","parentNode","pos","rootElm","offsetLeft","offsetTop","getOffset","scrollBy","size","testAxis","result","attach"],"mappings":"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","file":"../geom.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, noder, styler) {\r\n  'use strict'\r\n\r\n    var rootNodeRE = /^(?:body|html)$/i,\r\n        px = langx.toPixel,\r\n        offsetParent = noder.offsetParent,\r\n        cachedScrollbarWidth;\r\n\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth !== undefined) {\r\n            return cachedScrollbarWidth;\r\n        }\r\n        var w1, w2,\r\n            div = noder.createFragment(\"<div style=\" +\r\n                \"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\" +\r\n                \"<div style='height:300px;width:auto;'></div></div>\")[0],\r\n            innerDiv = div.childNodes[0];\r\n\r\n        noder.append(document.body, div);\r\n\r\n        w1 = innerDiv.offsetWidth;\r\n        styler.css(div, \"overflow\", \"scroll\");\r\n\r\n        w2 = innerDiv.offsetWidth;\r\n\r\n        if (w1 === w2) {\r\n            w2 = div[0].clientWidth;\r\n        }\r\n\r\n        noder.remove(div);\r\n\r\n        return (cachedScrollbarWidth = w1 - w2);\r\n    }\r\n\r\n\r\n    function hasScrollbar() {\r\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each border of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function borderExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.borderLeftWidth, elm),\r\n            top: px(s.borderTopWidth, elm),\r\n            right: px(s.borderRightWidth, elm),\r\n            bottom: px(s.borderBottomWidth, elm)\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function boundingHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return boundingSize(elm).height;\r\n        } else {\r\n            boundingSize(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingPosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top + (scrollTop(parent) || 0),\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left + (scrollLeft(parent) || 0)\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            if (elm == window || elm == document.documentElement || elm == document.body){\r\n                return {\r\n                    top : 0,\r\n                    left : 0,\r\n                    bottom : window.innerHeight,\r\n                    right : window.innerWidth,\r\n                    height : window.innerHeight,\r\n                    width : window.innerWidth\r\n                };\r\n            } else if (elm.getBoundingClientRect) {\r\n                return elm.getBoundingClientRect();\r\n            }\r\n        } else {\r\n            boundingPosition(elm, coords);\r\n            boundingSize(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject}dimension\r\n     */\r\n    function boundingSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            if (langx.isWindow(elm)) {\r\n                return {\r\n                    width: elm.innerWidth,\r\n                    height: elm.innerHeight\r\n                }\r\n\r\n            } else if (langx.isDocument(elm)) {\r\n                return getDocumentSize(document);\r\n            } else {\r\n                return {\r\n                    width: elm.offsetWidth,\r\n                    height: elm.offsetHeight\r\n                }\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm),\r\n                    bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function boundingWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return boundingSize(elm).width;\r\n        } else {\r\n            boundingSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the height of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function clientHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).height;\r\n        } else {\r\n            return clientSize(elm, {\r\n                height: value\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            return {\r\n                width: elm.clientWidth,\r\n                height: elm.clientHeight\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width - pex.left - pex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height - pex.top - pex.bottom;\r\n                }\r\n            } else {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height + bex.top + bex.bottom;\r\n                }\r\n\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n        return {\r\n            width: elm.clientWidth,\r\n            height: elm.clientHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the width of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).width;\r\n        } else {\r\n            clientSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the height of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return contentSize(elm).height;\r\n        } else {\r\n            contentSize(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the rect of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentRect(elm) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n\r\n        //// On Opera, offsetLeft includes the parent's border\r\n        //if(has(\"opera\")){\r\n        //    pe.l += be.l;\r\n        //    pe.t += be.t;\r\n        //}\r\n        return {\r\n            left: pex.left,\r\n            top: pex.top,\r\n            width: cs.width - pex.left - pex.right,\r\n            height: cs.height - pex.top - pex.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentSize(elm,dimension) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n        if (dimension === undefined) {\r\n            return {\r\n                width: cs.width - pex.left - pex.right,\r\n                height: cs.height - pex.top - pex.bottom\r\n            };\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (isBorderBox) {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width + pex.left + pex.right + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height + pex.top + pex.bottom + bex.top + bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the width of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return contentSize(elm).width;\r\n        } else {\r\n            contentSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLDocument} doc\r\n     */\r\n    function getDocumentSize(doc) {\r\n        var documentElement = doc.documentElement,\r\n            body = doc.body,\r\n            max = Math.max,\r\n            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),\r\n            clientWidth = max(documentElement.clientWidth, body.clientWidth),\r\n            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),\r\n            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),\r\n            clientHeight = max(documentElement.clientHeight, body.clientHeight),\r\n            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\r\n\r\n        return {\r\n            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\r\n            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\r\n        };\r\n    }\r\n\r\n\r\n    function inview(elm, cushion) {\r\n        function calibrate(coords, cushion) {\r\n            var o = {};\r\n            cushion = +cushion || 0;\r\n            o.width = (o.right = coords.right + cushion) - (o.left = coords.left - cushion);\r\n            o.height = (o.bottom = coords.bottom + cushion) - (o.top = coords.top - cushion);\r\n            return o;\r\n        }\r\n\r\n        var r = calibrate(boundingRect(elm), cushion),\r\n            vsize = viewportSize();\r\n\r\n        return !!r && r.bottom >= 0 && r.right >= 0 && r.top <= vsize.height && r.left <= vsize.width;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the widths of each margin of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function marginExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.marginLeft),\r\n            top: px(s.marginTop),\r\n            right: px(s.marginRight),\r\n            bottom: px(s.marginBottom),\r\n        }\r\n    }\r\n\r\n\r\n    function marginRect(elm) {\r\n        var obj = relativeRect(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            left: obj.left,\r\n            top: obj.top,\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n\r\n    function marginSize(elm) {\r\n        var obj = boundingSize(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each padding of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function paddingExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.paddingLeft),\r\n            top: px(s.paddingTop),\r\n            right: px(s.paddingRight),\r\n            bottom: px(s.paddingBottom),\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    //coordinate to the document\r\n    function pagePosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = pagePosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function pageRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset,\r\n                width: Math.round(obj.width),\r\n                height: Math.round(obj.height)\r\n            }\r\n        } else {\r\n            pagePosition(elm, coords);\r\n            boundingSize(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the position of the specified element border box , relative to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    // coordinate relative to it's parent\r\n    function relativePosition(elm, coords) {\r\n        if (coords == undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingPosition(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left - mex.left\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm);\r\n\r\n            var props = {\r\n                top: coords.top,\r\n                left: coords.left\r\n            };\r\n\r\n            /*\r\n            if (langx.isDefined(props.top)) {\r\n                props.top = props.top + (scrollTop(parent) || 0);\r\n            }\r\n\r\n            if (langx.isDefined(props.left)) {\r\n                props.left = props.left + (scrollLeft(parent) || 0);\r\n            } \r\n            */ \r\n\r\n            if (styler.css(elm, \"position\") == \"static\") {\r\n                props['position'] = \"relative\";\r\n            }\r\n\r\n\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the rect of the specified element border box , relatived to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function relativeRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingRect(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left,\r\n                width: offset.width,\r\n                height: offset.height\r\n            }\r\n        } else {\r\n            relativePosition(elm, coords);\r\n            boundingSize(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Scroll the specified element into view.\r\n     * @param {HTMLElement} elm\r\n     * @param {} align\r\n     */\r\n    function scrollIntoView(elm, align) {\r\n        function getOffset(elm, rootElm) {\r\n            var x, y, parent = elm;\r\n\r\n            x = y = 0;\r\n            while (parent && parent != rootElm && parent.nodeType) {\r\n                x += parent.offsetLeft || 0;\r\n                y += parent.offsetTop || 0;\r\n                parent = parent.offsetParent;\r\n            }\r\n\r\n            return { x: x, y: y };\r\n        }\r\n\r\n        var parentElm = elm.parentNode;\r\n        var x, y, width, height, parentWidth, parentHeight;\r\n        var pos = getOffset(elm, parentElm);\r\n\r\n        x = pos.x;\r\n        y = pos.y;\r\n        width = elm.offsetWidth;\r\n        height = elm.offsetHeight;\r\n        parentWidth = parentElm.clientWidth;\r\n        parentHeight = parentElm.clientHeight;\r\n\r\n        if (align == \"end\") {\r\n            x -= parentWidth - width;\r\n            y -= parentHeight - height;\r\n        } else if (align == \"center\") {\r\n            x -= (parentWidth / 2) - (width / 2);\r\n            y -= (parentHeight / 2) - (height / 2);\r\n        }\r\n\r\n        parentElm.scrollLeft = x;\r\n        parentElm.scrollTop = y;\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get or set the current horizontal position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollLeft(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n        var hasScrollLeft = \"scrollLeft\" in elm;\r\n        if (value === undefined) {\r\n            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset\r\n        } else {\r\n            if (hasScrollLeft) {\r\n                elm.scrollLeft = value;\r\n            } else {\r\n                elm.scrollTo(value, elm.scrollY);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or the current vertical position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollTop(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n\r\n        var hasScrollTop = \"scrollTop\" in elm;\r\n\r\n        if (value === undefined) {\r\n            return hasScrollTop ? elm.scrollTop : elm.pageYOffset\r\n        } else {\r\n            if (hasScrollTop) {\r\n                elm.scrollTop = value;\r\n            } else {\r\n                elm.scrollTo(elm.scrollX, value);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function scrollBy(elm, x, y) {\r\n        elm.scrollLeft += x;\r\n        elm.scrollTop += y;\r\n    }\r\n\r\n\r\n\r\n    function viewportSize(win) {\r\n        win = win || window;\r\n\r\n        return boundingRect(win);\r\n    }\r\n\r\n\r\n\r\n    function testAxis(elm) {\r\n       \r\n        var top = elm.offsetTop;\r\n        var left = elm.offsetLeft;\r\n        var width = elm.offsetWidth;\r\n        var height = elm.offsetHeight;\r\n\r\n        while(elm.offsetParent) {\r\n            elm = elm.offsetParent;\r\n            top += elm.offsetTop;\r\n            left += elm.offsetLeft;\r\n        }\r\n\r\n        var result = {x: 0, y: 0};\r\n\r\n        //Over the top of the window\r\n        if(top < window.pageYOffset) {\r\n            result.y = top - window.pageYOffset;\r\n        }\r\n        //Bellow the window\r\n        else if((top + height) > (window.pageYOffset + window.innerHeight))\r\n        {\r\n            result.y = (top + height) - (window.pageYOffset + window.innerHeight);\r\n        }\r\n\r\n        //Left to the window\r\n        if(left < window.pageXOffset) {\r\n            result.x = left - window.pageXOffset;\r\n        }\r\n        //Right to the window\r\n        else if((left + width) > (window.pageXOffset + window.innerWidth))\r\n        {\r\n            result.x = (left + width) - (window.pageXOffset + window.innerWidth);\r\n        }\r\n\r\n        return result;\r\n    };    \r\n\r\n    function geom() {\r\n        return geom;\r\n    }\r\n\r\n    langx.mixin(geom, {\r\n        borderExtents: borderExtents,\r\n\r\n        boundingHeight,\r\n        boundingPosition,\r\n        boundingRect,\r\n        boundingSize,\r\n        boundingWidth,\r\n\r\n        clientHeight,\r\n        clientSize,\r\n        clientWidth,\r\n\r\n        contentHeight,\r\n        contentRect,\r\n        contentSize,\r\n        contentWidth,\r\n\r\n        getDocumentSize: getDocumentSize,\r\n\r\n        hasScrollbar,\r\n\r\n        height: contentHeight,\r\n\r\n        inview,\r\n\r\n        marginExtents: marginExtents,\r\n\r\n        marginRect,\r\n        marginSize,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        paddingExtents: paddingExtents,\r\n\r\n        //coordinate to the document\r\n        pagePosition: pagePosition,\r\n\r\n        pageRect: pageRect,\r\n\r\n        // coordinate relative to it's parent\r\n        relativePosition: relativePosition,\r\n\r\n        relativeRect: relativeRect,\r\n\r\n        scrollbarWidth: scrollbarWidth,\r\n\r\n        scrollIntoView: scrollIntoView,\r\n\r\n        scrollLeft: scrollLeft,\r\n\r\n        scrollTop: scrollTop,\r\n\r\n        scrollBy,\r\n            \r\n        size: contentSize,\r\n\r\n        testAxis,\r\n\r\n        viewportSize,\r\n\r\n        width: contentWidth\r\n    });\r\n\r\n\r\n\r\n    return skylark.attach(\"domx.geom\", geom);\r\n});"]}