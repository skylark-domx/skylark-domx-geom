{"version":3,"sources":["geom.js"],"names":["define","skylark","langx","noder","styler","cachedScrollbarWidth","rootNodeRE","px","toPixel","offsetParent","borderExtents","elm","s","isWindow","left","top","right","bottom","getComputedStyle","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","boundingPosition","coords","parent","parentOffset","mex","pbex","undefined","test","nodeName","getBoundingClientRect","marginExtents","relativePosition","scrollTop","scrollLeft","this","boundingRect","window","document","documentElement","body","innerHeight","innerWidth","height","width","boundingSize","dimension","pex","bex","isDocument","getDocumentSize","offsetWidth","offsetHeight","isBorderBox","css","props","paddingExtents","clientSize","clientWidth","clientHeight","contentHeight","value","contentSize","cs","contentWidth","doc","max","Math","scrollWidth","scrollHeight","marginLeft","marginTop","marginRight","marginBottom","isDoc","paddingLeft","paddingTop","paddingRight","paddingBottom","pagePosition","obj","w","ownerDocument","defaultView","pageXOffset","pageYOffset","offset","relativeRect","nodeType","scrollingElement","hasScrollLeft","scrollTo","scrollY","hasScrollTop","scrollX","viewportSize","win","geom","mixin","boundingHeight","boundingWidth","contentRect","hasScrollbar","inview","cushion","o","r","vsize","isScrolledIntoView","elem","viewContainer","docViewTop","docViewBottom","elemTop","style","display","container","elemBottom","offsetTop","marginRect","me","marginSize","pageRect","round","scrollbarWidth","w1","div","innerDiv","createFragment","childNodes","append","w2","remove","scrollIntoView","align","parentElm","parentNode","x","pos","rootElm","y","offsetLeft","parentWidth","parentHeight","scrollBy","size","testAxis","result","attach"],"mappings":"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","file":"../geom.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, noder, styler) {\r\n  'use strict'\r\n\r\n    var rootNodeRE = /^(?:body|html)$/i,\r\n        px = langx.toPixel,\r\n        offsetParent = noder.offsetParent,\r\n        cachedScrollbarWidth;\r\n\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth !== undefined) {\r\n            return cachedScrollbarWidth;\r\n        }\r\n        var w1, w2,\r\n            div = noder.createFragment(\"<div style=\" +\r\n                \"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\" +\r\n                \"<div style='height:300px;width:auto;'></div></div>\")[0],\r\n            innerDiv = div.childNodes[0];\r\n\r\n        noder.append(document.body, div);\r\n\r\n        w1 = innerDiv.offsetWidth;\r\n        styler.css(div, \"overflow\", \"scroll\");\r\n\r\n        w2 = innerDiv.offsetWidth;\r\n\r\n        if (w1 === w2) {\r\n            w2 = div[0].clientWidth;\r\n        }\r\n\r\n        noder.remove(div);\r\n\r\n        return (cachedScrollbarWidth = w1 - w2);\r\n    }\r\n\r\n\r\n    function hasScrollbar() {\r\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each border of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function borderExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.borderLeftWidth, elm),\r\n            top: px(s.borderTopWidth, elm),\r\n            right: px(s.borderRightWidth, elm),\r\n            bottom: px(s.borderBottomWidth, elm)\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function boundingHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return boundingSize(elm).height;\r\n        } else {\r\n            boundingSize(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingPosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top + (scrollTop(parent) || 0),\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left + (scrollLeft(parent) || 0)\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            if (elm == window || elm == document.documentElement || elm == document.body){\r\n                return {\r\n                    top : 0,\r\n                    left : 0,\r\n                    bottom : window.innerHeight,\r\n                    right : window.innerWidth,\r\n                    height : window.innerHeight,\r\n                    width : window.innerWidth\r\n                };\r\n            } else if (elm.getBoundingClientRect) {\r\n                return elm.getBoundingClientRect();\r\n            }\r\n        } else {\r\n            boundingPosition(elm, coords);\r\n            boundingSize(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject}dimension\r\n     */\r\n    function boundingSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            if (langx.isWindow(elm)) {\r\n                return {\r\n                    width: elm.innerWidth,\r\n                    height: elm.innerHeight\r\n                }\r\n\r\n            } else if (langx.isDocument(elm)) {\r\n                return getDocumentSize(document);\r\n            } else {\r\n                return {\r\n                    width: elm.offsetWidth,\r\n                    height: elm.offsetHeight\r\n                }\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm),\r\n                    bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function boundingWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return boundingSize(elm).width;\r\n        } else {\r\n            boundingSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the height of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function clientHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).height;\r\n        } else {\r\n            return clientSize(elm, {\r\n                height: value\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            return {\r\n                width: elm.clientWidth || elm.innerWidth,\r\n                height: elm.clientHeight || elm.innerHeight\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width - pex.left - pex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height - pex.top - pex.bottom;\r\n                }\r\n            } else {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height + bex.top + bex.bottom;\r\n                }\r\n\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n        return {\r\n            width: elm.clientWidth,\r\n            height: elm.clientHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the width of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).width;\r\n        } else {\r\n            clientSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the height of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return contentSize(elm).height;\r\n        } else {\r\n            contentSize(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the rect of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentRect(elm) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n\r\n        //// On Opera, offsetLeft includes the parent's border\r\n        //if(has(\"opera\")){\r\n        //    pe.l += be.l;\r\n        //    pe.t += be.t;\r\n        //}\r\n        return {\r\n            left: pex.left,\r\n            top: pex.top,\r\n            width: cs.width - pex.left - pex.right,\r\n            height: cs.height - pex.top - pex.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentSize(elm,dimension) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n        if (dimension === undefined) {\r\n            return {\r\n                width: cs.width - pex.left - pex.right,\r\n                height: cs.height - pex.top - pex.bottom\r\n            };\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (isBorderBox) {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width + pex.left + pex.right + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height + pex.top + pex.bottom + bex.top + bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the width of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return contentSize(elm).width;\r\n        } else {\r\n            contentSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLDocument} doc\r\n     */\r\n    function getDocumentSize(doc) {\r\n        var documentElement = doc.documentElement,\r\n            body = doc.body,\r\n            max = Math.max,\r\n            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),\r\n            clientWidth = max(documentElement.clientWidth, body.clientWidth),\r\n            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),\r\n            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),\r\n            clientHeight = max(documentElement.clientHeight, body.clientHeight),\r\n            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\r\n\r\n        return {\r\n            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\r\n            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\r\n        };\r\n    }\r\n\r\n\r\n    function inview(elm, cushion) {\r\n        function calibrate(coords, cushion) {\r\n            var o = {};\r\n            cushion = +cushion || 0;\r\n            o.width = (o.right = coords.right + cushion) - (o.left = coords.left - cushion);\r\n            o.height = (o.bottom = coords.bottom + cushion) - (o.top = coords.top - cushion);\r\n            return o;\r\n        }\r\n\r\n        var r = calibrate(boundingRect(elm), cushion),\r\n            vsize = viewportSize();\r\n\r\n        return !!r && r.bottom >= 0 && r.right >= 0 && r.top <= vsize.height && r.left <= vsize.width;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the widths of each margin of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function marginExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.marginLeft),\r\n            top: px(s.marginTop),\r\n            right: px(s.marginRight),\r\n            bottom: px(s.marginBottom),\r\n        }\r\n    }\r\n\r\n\r\n    function marginRect(elm) {\r\n        var obj = relativeRect(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            left: obj.left,\r\n            top: obj.top,\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n\r\n    function marginSize(elm) {\r\n        var obj = boundingSize(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each padding of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function paddingExtents(elm) {\r\n        if (noder.isWindow(elm) || noder.isDoc(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.paddingLeft),\r\n            top: px(s.paddingTop),\r\n            right: px(s.paddingRight),\r\n            bottom: px(s.paddingBottom),\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    //coordinate to the document\r\n    function pagePosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = pagePosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function pageRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset,\r\n                width: Math.round(obj.width),\r\n                height: Math.round(obj.height)\r\n            }\r\n        } else {\r\n            pagePosition(elm, coords);\r\n            boundingSize(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the position of the specified element border box , relative to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    // coordinate relative to it's parent\r\n    function relativePosition(elm, coords) {\r\n        if (coords == undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingPosition(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left - mex.left\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm);\r\n\r\n            var props = {\r\n                top: coords.top,\r\n                left: coords.left\r\n            };\r\n\r\n            /*\r\n            if (langx.isDefined(props.top)) {\r\n                props.top = props.top + (scrollTop(parent) || 0);\r\n            }\r\n\r\n            if (langx.isDefined(props.left)) {\r\n                props.left = props.left + (scrollLeft(parent) || 0);\r\n            } \r\n            */ \r\n\r\n            if (styler.css(elm, \"position\") == \"static\") {\r\n                props['position'] = \"relative\";\r\n            }\r\n\r\n\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the rect of the specified element border box , relatived to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function relativeRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingRect(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left,\r\n                width: offset.width,\r\n                height: offset.height\r\n            }\r\n        } else {\r\n            relativePosition(elm, coords);\r\n            boundingSize(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Scroll the specified element into view.\r\n     * @param {HTMLElement} elm\r\n     * @param {} align\r\n     */\r\n    function scrollIntoView(elm, align) {\r\n        function getOffset(elm, rootElm) {\r\n            var x, y, parent = elm;\r\n\r\n            x = y = 0;\r\n            while (parent && parent != rootElm && parent.nodeType) {\r\n                x += parent.offsetLeft || 0;\r\n                y += parent.offsetTop || 0;\r\n                parent = parent.offsetParent;\r\n            }\r\n\r\n            return { x: x, y: y };\r\n        }\r\n\r\n        var parentElm = elm.parentNode;\r\n        var x, y, width, height, parentWidth, parentHeight;\r\n        var pos = getOffset(elm, parentElm);\r\n\r\n        x = pos.x;\r\n        y = pos.y;\r\n        width = elm.offsetWidth;\r\n        height = elm.offsetHeight;\r\n        parentWidth = parentElm.clientWidth;\r\n        parentHeight = parentElm.clientHeight;\r\n\r\n        if (align == \"end\") {\r\n            x -= parentWidth - width;\r\n            y -= parentHeight - height;\r\n        } else if (align == \"center\") {\r\n            x -= (parentWidth / 2) - (width / 2);\r\n            y -= (parentHeight / 2) - (height / 2);\r\n        }\r\n\r\n        parentElm.scrollLeft = x;\r\n        parentElm.scrollTop = y;\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get or set the current horizontal position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollLeft(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n        var hasScrollLeft = \"scrollLeft\" in elm;\r\n        if (value === undefined) {\r\n            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset\r\n        } else {\r\n            if (hasScrollLeft) {\r\n                elm.scrollLeft = value;\r\n            } else {\r\n                elm.scrollTo(value, elm.scrollY);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or the current vertical position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollTop(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n\r\n        var hasScrollTop = \"scrollTop\" in elm;\r\n\r\n        if (value === undefined) {\r\n            return hasScrollTop ? elm.scrollTop : elm.pageYOffset\r\n        } else {\r\n            if (hasScrollTop) {\r\n                elm.scrollTop = value;\r\n            } else {\r\n                elm.scrollTo(elm.scrollX, value);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function scrollBy(elm, x, y) {\r\n        elm.scrollLeft += x;\r\n        elm.scrollTop += y;\r\n    }\r\n\r\n\r\n\r\n    function viewportSize(win) {\r\n        win = win || window;\r\n\r\n        return boundingRect(win);\r\n    }\r\n\r\n\r\n\r\n    function testAxis(elm) {\r\n       \r\n        var top = elm.offsetTop;\r\n        var left = elm.offsetLeft;\r\n        var width = elm.offsetWidth;\r\n        var height = elm.offsetHeight;\r\n\r\n        while(elm.offsetParent) {\r\n            elm = elm.offsetParent;\r\n            top += elm.offsetTop;\r\n            left += elm.offsetLeft;\r\n        }\r\n\r\n        var result = {x: 0, y: 0};\r\n\r\n        //Over the top of the window\r\n        if(top < window.pageYOffset) {\r\n            result.y = top - window.pageYOffset;\r\n        }\r\n        //Bellow the window\r\n        else if((top + height) > (window.pageYOffset + window.innerHeight))\r\n        {\r\n            result.y = (top + height) - (window.pageYOffset + window.innerHeight);\r\n        }\r\n\r\n        //Left to the window\r\n        if(left < window.pageXOffset) {\r\n            result.x = left - window.pageXOffset;\r\n        }\r\n        //Right to the window\r\n        else if((left + width) > (window.pageXOffset + window.innerWidth))\r\n        {\r\n            result.x = (left + width) - (window.pageXOffset + window.innerWidth);\r\n        }\r\n\r\n        return result;\r\n    };    \r\n\r\n\r\n    function isScrolledIntoView(elem,viewContainer) {\r\n        if (elem.style.display === \"none\") {\r\n            return false;\r\n        }\r\n\r\n        var docViewTop = container.scrollTop,\r\n            docViewBottom = docViewTop + container.clientHeight,\r\n            elemTop = elem.offsetTop,\r\n            elemBottom = elemTop + elem.clientHeight;\r\n\r\n        // Is in view if either the top or the bottom of the page is between the\r\n        // document viewport bounds,\r\n        // or if the top is above the viewport and the bottom is below it.\r\n        return (elemTop >= docViewTop && elemTop < docViewBottom)\r\n                || (elemBottom >= docViewTop && elemBottom < docViewBottom)\r\n                || (elemTop < docViewTop && elemBottom >= docViewBottom);\r\n    }\r\n\r\n    function geom() {\r\n        return geom;\r\n    }\r\n\r\n    langx.mixin(geom, {\r\n        borderExtents: borderExtents,\r\n\r\n        boundingHeight,\r\n        boundingPosition,\r\n        boundingRect,\r\n        boundingSize,\r\n        boundingWidth,\r\n\r\n        clientHeight,\r\n        clientSize,\r\n        clientWidth,\r\n\r\n        contentHeight,\r\n        contentRect,\r\n        contentSize,\r\n        contentWidth,\r\n\r\n        getDocumentSize: getDocumentSize,\r\n\r\n        hasScrollbar,\r\n\r\n        height: contentHeight,\r\n\r\n        inview,\r\n\r\n        isScrolledIntoView,\r\n\r\n        marginExtents: marginExtents,\r\n\r\n        marginRect,\r\n        marginSize,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        paddingExtents: paddingExtents,\r\n\r\n        //coordinate to the document\r\n        pagePosition: pagePosition,\r\n\r\n        pageRect: pageRect,\r\n\r\n        // coordinate relative to it's parent\r\n        relativePosition: relativePosition,\r\n\r\n        relativeRect: relativeRect,\r\n\r\n        scrollbarWidth: scrollbarWidth,\r\n\r\n        scrollIntoView: scrollIntoView,\r\n\r\n        scrollLeft: scrollLeft,\r\n\r\n        scrollTop: scrollTop,\r\n\r\n        scrollBy,\r\n            \r\n        size: contentSize,\r\n\r\n        testAxis,\r\n\r\n        viewportSize,\r\n\r\n        width: contentWidth\r\n    });\r\n\r\n\r\n\r\n    return skylark.attach(\"domx.geom\", geom);\r\n});"]}