{"version":3,"sources":["main.js"],"names":["define","geom","velm","$","delegate","fn","offset","wraps","wrapper_value","pagePosition","scrollTop","scrollLeft","position","options","this","length","of","langx","clone","each","posit","elem","relativePosition","offsetParent","wrapper_map","size","width","height","clientSize","forEach","dimension","Dimension","replace","m","toUpperCase","margin","value","arguments","undefined","el","cb","me","marginExtents","left","right","top","bottom","idx","mb","innerWidth","clientWidth","innerHeight","clientHeight"],"mappings":";;;;;;;AAAAA,QACI,SACA,oBACA,sBACF,SAASC,EAAKC,EAAKC,GAmHjB,OAjHAD,EAAKE,UACD,gBACA,mBACA,eACA,eACA,aACA,cACA,cACA,SACA,gBACA,eACA,iBACA,eACA,WACA,mBACA,eACA,iBACA,aACA,YACA,OACA,SACDH,GAEHE,EAAEE,GAAGC,OAASH,EAAEI,MAAMC,cAAcP,EAAKQ,aAAcR,EAAMA,EAAKQ,cAElEN,EAAEE,GAAGK,UAAYP,EAAEI,MAAMC,cAAcP,EAAKS,UAAWT,GAEvDE,EAAEE,GAAGM,WAAaR,EAAEI,MAAMC,cAAcP,EAAKU,WAAYV,GAEzDE,EAAEE,GAAGO,SAAY,SAASC,GACtB,GAAKC,KAAKC,OAAV,CAEA,GAAIF,EAKA,OAJIA,EAAQG,IAAMH,EAAQG,GAAGD,UACzBF,EAAUI,MAAMC,MAAML,IACdG,GAAKH,EAAQG,GAAG,IAErBF,KAAKK,KAAM,WACdlB,EAAKmB,MAAMN,KAAKD,KAGpB,IAAIQ,EAAOP,KAAK,GAEhB,OAAOb,EAAKqB,iBAAiBD,KAKrClB,EAAEE,GAAGkB,aAAepB,EAAEI,MAAMiB,YAAYvB,EAAKsB,aAActB,GAG3DE,EAAEE,GAAGoB,KAAOtB,EAAEI,MAAMC,cAAcP,EAAKwB,KAAMxB,GAE7CE,EAAEE,GAAGqB,MAAQvB,EAAEI,MAAMC,cAAcP,EAAKyB,MAAOzB,EAAMA,EAAKyB,OAE1DvB,EAAEE,GAAGsB,OAASxB,EAAEI,MAAMC,cAAcP,EAAK0B,OAAQ1B,EAAMA,EAAK0B,QAE5DxB,EAAEE,GAAGuB,WAAazB,EAAEI,MAAMC,cAAcP,EAAK2B,WAAY3B,EAAK2B,aAE7D,QAAS,UAAUC,QAAQ,SAASC,GACjC,IAAYC,EAAYD,EAAUE,QAAQ,IAAK,SAASC,GACpD,OAAOA,EAAE,GAAGC,gBAGhB/B,EAAEE,GAAG,QAAU0B,GAAa,SAASI,EAAQC,GAWzC,GAVIC,UAAUtB,OACY,kBAAXoB,IACPC,EAAQD,EACRA,GAAS,IAGbA,GAAS,EACTC,OAAQE,QAGEA,IAAVF,EAAqB,CACrB,IAAIG,EAAKzB,KAAK,GACd,IAAKyB,EACD,OAEJ,IAAIC,EAAKvC,EAAKwB,KAAKc,GACnB,GAAIJ,EAAQ,CACR,IAAIM,EAAKxC,EAAKyC,cAAcH,GAC5BC,EAAGd,MAAQc,EAAGd,MAAQe,EAAGE,KAAOF,EAAGG,MACnCJ,EAAGb,OAASa,EAAGb,OAASc,EAAGI,IAAMJ,EAAGK,OAExC,MAAqB,UAAdhB,EAAwBU,EAAGd,MAAQc,EAAGb,OAE7C,OAAOb,KAAKK,KAAK,SAAS4B,EAAKR,GAC3B,IAAIS,KACAP,EAAKxC,EAAKyC,cAAcH,GACV,UAAdT,GACAkB,EAAGtB,MAAQU,EACPD,IACAa,EAAGtB,MAAQsB,EAAGtB,MAAQe,EAAGE,KAAOF,EAAGG,SAGvCI,EAAGrB,OAASS,EACRD,IACAa,EAAGrB,OAASqB,EAAGrB,OAASc,EAAGI,IAAMJ,EAAGK,SAG5C7C,EAAKwB,KAAKc,EAAIS,QAO9B7C,EAAEE,GAAG4C,WAAa9C,EAAEI,MAAMC,cAAcP,EAAKiD,YAAajD,EAAMA,EAAKiD,aAErE/C,EAAEE,GAAG8C,YAAchD,EAAEI,MAAMC,cAAcP,EAAKmD,aAAcnD,EAAMA,EAAKmD,cAEhEnD","file":"../main.js","sourcesContent":["define([\r\n    \"./geom\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\"        \r\n],function(geom,velm,$){\r\n   // from ./geom\r\n    velm.delegate([\r\n        \"borderExtents\",\r\n        \"boundingPosition\",\r\n        \"boundingRect\",\r\n        \"clientHeight\",\r\n        \"clientSize\",\r\n        \"clientWidth\",\r\n        \"contentRect\",\r\n        \"height\",\r\n        \"marginExtents\",\r\n        \"offsetParent\",\r\n        \"paddingExtents\",\r\n        \"pagePosition\",\r\n        \"pageRect\",\r\n        \"relativePosition\",\r\n        \"relativeRect\",\r\n        \"scrollIntoView\",\r\n        \"scrollLeft\",\r\n        \"scrollTop\",\r\n        \"size\",\r\n        \"width\"\r\n    ], geom);\r\n\r\n    $.fn.offset = $.wraps.wrapper_value(geom.pagePosition, geom, geom.pagePosition);\r\n\r\n    $.fn.scrollTop = $.wraps.wrapper_value(geom.scrollTop, geom);\r\n\r\n    $.fn.scrollLeft = $.wraps.wrapper_value(geom.scrollLeft, geom);\r\n\r\n    $.fn.position =  function(options) {\r\n        if (!this.length) return\r\n\r\n        if (options) {\r\n            if (options.of && options.of.length) {\r\n                options = langx.clone(options);\r\n                options.of = options.of[0];\r\n            }\r\n            return this.each( function() {\r\n                geom.posit(this,options);\r\n            });\r\n        } else {\r\n            var elem = this[0];\r\n\r\n            return geom.relativePosition(elem);\r\n\r\n        }             \r\n    };\r\n\r\n    $.fn.offsetParent = $.wraps.wrapper_map(geom.offsetParent, geom);\r\n\r\n\r\n    $.fn.size = $.wraps.wrapper_value(geom.size, geom);\r\n\r\n    $.fn.width = $.wraps.wrapper_value(geom.width, geom, geom.width);\r\n\r\n    $.fn.height = $.wraps.wrapper_value(geom.height, geom, geom.height);\r\n\r\n    $.fn.clientSize = $.wraps.wrapper_value(geom.clientSize, geom.clientSize);\r\n    \r\n    ['width', 'height'].forEach(function(dimension) {\r\n        var offset, Dimension = dimension.replace(/./, function(m) {\r\n            return m[0].toUpperCase()\r\n        });\r\n\r\n        $.fn['outer' + Dimension] = function(margin, value) {\r\n            if (arguments.length) {\r\n                if (typeof margin !== 'boolean') {\r\n                    value = margin;\r\n                    margin = false;\r\n                }\r\n            } else {\r\n                margin = false;\r\n                value = undefined;\r\n            }\r\n\r\n            if (value === undefined) {\r\n                var el = this[0];\r\n                if (!el) {\r\n                    return undefined;\r\n                }\r\n                var cb = geom.size(el);\r\n                if (margin) {\r\n                    var me = geom.marginExtents(el);\r\n                    cb.width = cb.width + me.left + me.right;\r\n                    cb.height = cb.height + me.top + me.bottom;\r\n                }\r\n                return dimension === \"width\" ? cb.width : cb.height;\r\n            } else {\r\n                return this.each(function(idx, el) {\r\n                    var mb = {};\r\n                    var me = geom.marginExtents(el);\r\n                    if (dimension === \"width\") {\r\n                        mb.width = value;\r\n                        if (margin) {\r\n                            mb.width = mb.width - me.left - me.right\r\n                        }\r\n                    } else {\r\n                        mb.height = value;\r\n                        if (margin) {\r\n                            mb.height = mb.height - me.top - me.bottom;\r\n                        }\r\n                    }\r\n                    geom.size(el, mb);\r\n                })\r\n\r\n            }\r\n        };\r\n    })\r\n\r\n    $.fn.innerWidth = $.wraps.wrapper_value(geom.clientWidth, geom, geom.clientWidth);\r\n\r\n    $.fn.innerHeight = $.wraps.wrapper_value(geom.clientHeight, geom, geom.clientHeight);\r\n\r\n    return geom;\r\n});"]}