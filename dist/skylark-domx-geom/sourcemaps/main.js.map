{"version":3,"sources":["main.js"],"names":["define","langx","geom","velm","$","delegate","fn","offset","wraps","wrapper_value","pagePosition","scrollTop","scrollLeft","position","options","elem","this","length","of","clone","each","posit","relativePosition","offsetParent","wrapper_map","boundingSize","width","height","clientSize","forEach","dimension","Dimension","replace","m","toUpperCase","margin","value","cb","me","arguments","undefined","idx","el","mb","marginExtents","left","right","top","bottom","innerWidth","clientWidth","innerHeight","clientHeight"],"mappings":"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","file":"../main.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",\r\n    \"./posit\",\r\n    \"./scroll-to-top\"\r\n],function(langx,geom,velm,$){\r\n   // from ./geom\r\n    velm.delegate([\r\n        \"borderExtents\",\r\n        \"boundingPosition\",\r\n        \"boundingHeight\",\r\n        \"boundingRect\",\r\n        \"boundingSize\",\r\n        \"boundingWidth\",\r\n\r\n        \"clientHeight\",\r\n        \"clientSize\",\r\n        \"clientWidth\",\r\n\r\n        \"contentHeight\",\r\n        \"contentRect\",\r\n        \"contentSize\",\r\n        \"contentWidth\",\r\n\r\n///        \"height\",\r\n        \"marginExtents\",\r\n        \"marginRect\",\r\n        \"marginSize\",\r\n        \"offsetParent\",\r\n        \"paddingExtents\",\r\n        \"pagePosition\",\r\n        \"pageRect\",\r\n        \"relativePosition\",\r\n        \"relativeRect\",\r\n        \"scrollIntoView\",\r\n        \"scrollLeft\",\r\n        \"scrollTop\",\r\n///        \"pageSize\",\r\n///        \"width\"\r\n    ], geom,{\r\n///        \"pageSize\" : \"size\"\r\n    });\r\n\r\n    $.fn.offset = $.wraps.wrapper_value(geom.pagePosition, geom, geom.pagePosition);\r\n\r\n    $.fn.scrollTop = $.wraps.wrapper_value(geom.scrollTop, geom);\r\n\r\n    $.fn.scrollLeft = $.wraps.wrapper_value(geom.scrollLeft, geom);\r\n\r\n    $.fn.position =  function(options) {\r\n        if (!this.length) {\r\n            return this;\r\n        }\r\n\r\n        if (options) {\r\n            if (options.of && options.of.length) {\r\n                options = langx.clone(options);\r\n                options.of = options.of[0];\r\n            }\r\n            return this.each( function() {\r\n                geom.posit(this,options);\r\n            });\r\n        } else {\r\n            var elem = this[0];\r\n\r\n            return geom.relativePosition(elem);\r\n\r\n        }             \r\n    };\r\n\r\n    $.fn.offsetParent = $.wraps.wrapper_map(geom.offsetParent, geom);\r\n\r\n\r\n    ///$.fn.pageSize = $.wraps.wrapper_value(geom.size, geom);\r\n    $.fn.boundingSize = $.wraps.wrapper_value(geom.boundingSize, geom);\r\n\r\n    $.fn.width = $.wraps.wrapper_value(geom.width, geom, geom.width);\r\n\r\n    $.fn.height = $.wraps.wrapper_value(geom.height, geom, geom.height);\r\n\r\n    $.fn.clientSize = $.wraps.wrapper_value(geom.clientSize, geom);\r\n    \r\n    ['width', 'height'].forEach(function(dimension) {\r\n        var offset, Dimension = dimension.replace(/./, function(m) {\r\n            return m[0].toUpperCase()\r\n        });\r\n\r\n        $.fn['outer' + Dimension] = function(margin, value) {\r\n            if (arguments.length) {\r\n                if (typeof margin !== 'boolean') {\r\n                    value = margin;\r\n                    margin = false;\r\n                }\r\n            } else {\r\n                margin = false;\r\n                value = undefined;\r\n            }\r\n\r\n            if (value === undefined) {\r\n                var el = this[0];\r\n                if (!el) {\r\n                    return undefined;\r\n                }\r\n                var cb = geom.boundingSize(el);\r\n                if (margin) {\r\n                    var me = geom.marginExtents(el);\r\n                    cb.width = cb.width + me.left + me.right;\r\n                    cb.height = cb.height + me.top + me.bottom;\r\n                }\r\n                return dimension === \"width\" ? cb.width : cb.height;\r\n            } else {\r\n                return this.each(function(idx, el) {\r\n                    var mb = {};\r\n                    var me = geom.marginExtents(el);\r\n                    if (dimension === \"width\") {\r\n                        mb.width = value;\r\n                        if (margin) {\r\n                            mb.width = mb.width - me.left - me.right\r\n                        }\r\n                    } else {\r\n                        mb.height = value;\r\n                        if (margin) {\r\n                            mb.height = mb.height - me.top - me.bottom;\r\n                        }\r\n                    }\r\n                    geom.boundingSize(el, mb);\r\n                })\r\n\r\n            }\r\n        };\r\n    })\r\n\r\n    $.fn.innerWidth = $.wraps.wrapper_value(geom.clientWidth, geom, geom.clientWidth);\r\n\r\n    $.fn.innerHeight = $.wraps.wrapper_value(geom.clientHeight, geom, geom.clientHeight);\r\n\r\n    return geom;\r\n});"]}